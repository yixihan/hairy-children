server:
  port: 9001
  max-http-header-size: 102400
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    threads:
      # Tomcat启动初始化的线程数，默认值25
      min-spare: 30
      # tomcat最大线程数，默认为200
      max: 800

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    druid:
      url: jdbc:mysql://localhost:3306/hairy_children?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
      username: root
      password: 123456
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        # 控制台管理用户名和密码
        login-username: admin
        login-password: admin
      filter:
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true

  #时间戳统一转换
  jackson:
    date-format: yyyy-MM-dd
    time-zone: GMT+8

  # 文件上传配置
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB
      enabled: true

  # 热部署
  devtools:
    restart:
      # 是否启用重启
      enabled: true

  # redis 配置
  redis:
      port: 6379
      host: host
      database: 11
      password: password

  #邮件发送配置
  mail:
      username: username
      password: password

    host: smtp.qq.com
    # 开启加密授权验证
    properties:
      mail:
        smtp:
          ssl:
            enable:
              true

  # rabbitmq
  rabbitmq:
    host: host
    port: 5672
    username: username
    password: password
    # NONE : 禁用发布确认模式，是默认值
    # CORRELATED : 发布消息成功到交换器后会触发回调方法
    # SIMPLE : 经测试有两种效果，
    # 效果一和 CORRELATED 值一样会触发回调方法,
    # 其二在发布消息成功后使用 rabbitTemplate 调用 waitForConfirms 或 waitForConfirmsOrDie 方法
    # 等待 broker 节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是
    # waitForConfirmsOrDie 方法如果返回 false 则会关闭 channel，则接下来无法发送消息到 broker
    publisher-confirm-type: correlated
    # 回退消息
    publisher-returns: true

# mybatis-plus配置
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:mapper/**Mapper.xml
  type-aliases-package: com.wq.pojo

  # 逻辑删除
  global-config:
    db-config:
      logic-delete-field: deleted  # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)

# 图片存储位置
upload:
  paths: src/main/resources/static/photoDir/
  adoptPaths: adopt/
  avatarPaths: avatar/
  cluePaths: clue/
  titlePaths: title/
  urlPaths: localhost:9001/

customer:
  # 实名认证
  appCode: appCode
  # 发送短信
  phone:
    secretId: secretId
    secretKey: secretKey
    smsSdkAppId: smsSdkAppId
    signName: signName
    templateId: templateId

